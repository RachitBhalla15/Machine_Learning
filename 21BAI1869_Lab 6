{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPx096JtTyByKX4WfWFo4fE"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"RjSssLfW4b-U"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pickle\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn import model_selection\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score\n","from sklearn.preprocessing import LabelEncoder, MinMaxScaler\n","from sklearn.model_selection import train_test_split\n"]},{"cell_type":"code","source":["df=pd.read_csv('/content/Fertilizer Prediction.csv')\n","df\n"],"metadata":{"id":"_oeHtiIN6fvj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head(10)"],"metadata":{"id":"zU-bOUc77AL-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.info()"],"metadata":{"id":"LRtnhvPr7Aj7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.describe()"],"metadata":{"id":"YTmjuucM7A9Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["le= LabelEncoder()\n","df['Soil Type'] = le.fit_transform(df['Soil Type'])\n","df['Crop Type'] = le.fit_transform(df['Crop Type'])"],"metadata":{"id":"X49Vw9yW7PWv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","X = df.drop('Fertilizer Name', axis=1).copy()\n","y = df['Fertilizer Name'].copy()\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.4, shuffle=True, random_state=1)\n","\n","scaler = MinMaxScaler()\n","scaler.fit(X_train)\n","train_x=scaler.transform(X_train)\n"],"metadata":{"id":"YFxraj8eAW5N"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_model=LogisticRegression()\n","df_model.fit(X_train,y_train)"],"metadata":{"id":"-LyV4lcaAW-4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred = df_model.predict(X_test)\n","accuracy = accuracy_score(y_test, y_pred)\n","print('Accuracy:', accuracy)"],"metadata":{"id":"a-2NzoVJAXL_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"aCCURACY\", df_model.score(X_test,y_test)*100)"],"metadata":{"id":"z5bKNxNAAXOj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = KNeighborsClassifier(n_neighbors=4)\n","model.fit(X_train, y_train)\n","\n","# Step 7: Evaluating the model\n","y_pred = model.predict(X_test)\n","accuracy = accuracy_score(y_test, y_pred)\n","print('Accuracy:', accuracy)"],"metadata":{"id":"0Ywfwl7YKzJl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pickle.dump(df, open('fertilizer_model.pkl', 'wb'))"],"metadata":{"id":"vLF96w6cAXR-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_user_input():\n","    temperature = float(input(\"Temperature (in degrees Celsius): \"))\n","    humidity = float(input(\"Humidity (in percentage): \"))\n","    moisture = float(input(\"Moisture (ratio of water mass): \"))\n","    soil_type = le.transform([input(\"Soil Type: \")])[0]\n","    crop_type = le.transform([input(\"Crop Type: \")])[0]\n","    nitrogen = float(input(\"Nitrogen content (in percentage): \"))\n","    potassium = float(input(\"Potassium content (in percentage): \"))\n","    phosphorous = float(input(\"Phosphorous content (in percentage): \"))\n","    \n","    user_input = [temperature, humidity, moisture, soil_type, crop_type, nitrogen, potassium, phosphorous]\n","    return user_input\n","\n","def preprocess_input(user_input):\n","    user_input = scaler.transform([user_input])\n","    return user_input\n","\n","user_input = get_user_input()\n","user_input = preprocess_input(user_input)\n","\n","loaded_model = pickle.load(open('fertilizer_model.pkl', 'rb'))\n","prediction = loaded_model.predict(user_input)\n","print('Recommended fertilizer:', prediction)"],"metadata":{"id":"S2ULhvn1Hr31"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"6Uvcr67AHsSj"},"execution_count":null,"outputs":[]}]}